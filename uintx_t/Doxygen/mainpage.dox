/// \mainpage 
///
/// Overview
/// ========
///
/// The extensible unsigned integer type uintx_t is an arbitrary-precision
/// unsigned integer type designed to be used in place of their fixed-precision
/// counterparts with minimal code changes (usually just an `"x"` here or there).
/// Extensible unsigned integers have a full range of constructors, operators,
/// and functions for conversion into an std::string suitable for printing. 
/// There is also a small math library for extensible unsigned integer, consisting
/// of the functions powerx(), factorialx(), gcdx(), fibx(), and sqrtx().
/// Here's an example of how they might be used:
///
///      #include <iostream>
///      #include "uintx_t.h"
///      #include "uintx_math.h"
///      
///	     const uintx_t x("0x766c1042499184caab4a80602433449a");
///	     const uintx_t y = 9999;
///	     uintx_t z = x*y + sqrtx(x/y) + factorialx(32) + 9;
///	     std::cout << to_hexstring(z) << std::endl;
///
/// The output from this code snippet is:
///
///      0x121166CF3FC4D4D7045FABB41FFBE2B806180B
///
/// See the source code for uintx_math.cpp for more examples of programming with 
/// extensible unsigned integers.


